{"version":3,"sources":["card/card.jsx","DrawButton/drawbutton.jsx","config/firebase/db_config.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","eng","han","rom","DrawButton","drawCard","bind","this","onClick","Component","DB_CONFIG","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","App","firebase","apps","length","initializeApp","database","ref","child","updateCard","state","cards","currentCard","currentCards","on","snap","push","id","val","setState","getRandomCard","card","Math","floor","random","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2UAkBeA,G,YAfF,SAACC,GAAD,OACT,yBAAKC,UAAU,kBACX,yBAAKA,UAAU,QACX,yBAAKA,UAAU,SACX,yBAAKA,UAAU,OAAOD,EAAME,MAEhC,yBAAKD,UAAU,QACX,yBAAKA,UAAU,OAAOD,EAAMG,KAC5B,yBAAKF,UAAU,OAAOD,EAAMI,UCY7BC,G,wDAnBX,WAAYL,GAAO,IAAD,8BACd,cAAMA,IAEDM,SAAW,EAAKA,SAASC,KAAd,gBAHF,E,uDAOdC,KAAKR,MAAMM,a,6BAGRN,GACH,OACI,yBAAKC,UAAU,mBACX,4BAAQA,UAAU,MAAMQ,QAASD,KAAKF,UAAtC,kB,GAdSI,c,iBCAZC,G,YAAY,CAErBC,OAAQ,0CACRC,WAAY,yCACZC,YAAa,iDACbC,UAAW,yBACXC,cAAe,qCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBCiEJC,E,kDAnEb,WAAYpB,GAAO,IAAD,6BAChB,cAAMA,GAEFqB,IAASC,KAAKC,QAChBF,IAASG,cAAcb,GAEzB,EAAKc,SAAWJ,IAASI,WAAWC,MAAMC,MAAM,SAChD,EAAKC,WAAa,EAAKA,WAAWrB,KAAhB,gBAElB,EAAKsB,MAAQ,CACXC,MAAO,GACPC,YAAa,IAXC,E,iEAgBG,IAAD,OACZC,EAAexB,KAAKqB,MAAMC,MAChCtB,KAAKiB,SAASQ,GAAG,eAAe,SAAAC,GAC9BF,EAAaG,KAAK,CAChBC,GAAIF,EAAKG,MAAMD,GACflC,IAAKgC,EAAKG,MAAMnC,IAChBC,IAAK+B,EAAKG,MAAMlC,IAChBC,IAAK8B,EAAKG,MAAMjC,MAGlB,EAAKkC,SAAS,CACZR,MAAOE,EACPD,YAAa,EAAKQ,cAAcP,U,oCAKxBA,GACZ,IACIQ,EAAOR,EADOS,KAAKC,MAAMD,KAAKE,SAAWX,EAAaT,SAK1D,OAHIiB,IAAShC,KAAKqB,MAAME,aACtBvB,KAAK+B,cAAcP,GAEdQ,I,mCAIP,IAAMR,EAAexB,KAAKqB,MAAMC,MAChCtB,KAAK8B,SAAS,CACZR,MAAOE,EACPD,YAAavB,KAAK+B,cAAcP,O,+BAKpC,OACE,yBAAK/B,UAAU,OACb,yBAAKA,UAAU,WACf,kBAAC,EAAD,CAAMC,IAAKM,KAAKqB,MAAME,YAAY7B,IAC5BC,IAAKK,KAAKqB,MAAME,YAAY5B,IAC5BC,IAAKI,KAAKqB,MAAME,YAAY3B,OAGlC,yBAAKH,UAAU,aACb,kBAAC,EAAD,CAAaK,SAAUE,KAAKoB,mB,GA7DlBlB,aCGEkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9f475841.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './card.css';\n\nconst Card = (props) => (\n    <div className=\"card-container\">\n        <div className=\"card\">\n            <div className=\"front\">\n                <div className=\"eng\">{props.eng}</div>\n            </div>\n            <div className=\"back\">\n                <div className=\"han\">{props.han}</div>\n                <div className=\"rom\">{props.rom}</div>\n\n            </div>\n        </div>\n    </div>\n)\n\nexport default Card;","import React, { Component } from 'react';\nimport './drawbutton.css';\n\nclass DrawButton extends Component{\n    constructor(props){\n        super(props);\n\n        this.drawCard = this.drawCard.bind(this);\n    }\n    \n    drawCard(){\n        this.props.drawCard();\n    }\n\n    render(props){\n        return(\n            <div className=\"buttonContainer\">\n                <button className=\"btn\" onClick={this.drawCard}>Draw Card</button>\n            </div>\n        )\n    }\n}\n\nexport default DrawButton","import * as firebase from 'firebase';\n\n\nexport const DB_CONFIG = {\n\n    apiKey: \"AIzaSyDvxhZZ_yGbIhU7J91vWNbhRchMcgBHSFc\",\n    authDomain: \"react-flashcards-4577e.firebaseapp.com\",\n    databaseURL: \"https://react-flashcards-4577e.firebaseio.com/\",\n    projectId: \"react-flashcards-4577e\",\n    storageBucket: \"react-flashcards-4577e.appspot.com\",\n    messagingSenderId: \"305110212716\",\n    appId: \"1:305110212716:web:0a4178e5d13f4dc177f849\",\n    measurementId: \"G-RB4LYEQ12E\"\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport Card from './card/card';\nimport DrawButton from './DrawButton/drawbutton';\nimport firebase from 'firebase/app';\nimport 'firebase/database';\n\nimport { DB_CONFIG } from './config/firebase/db_config';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n\n    if(!firebase.apps.length){\n      firebase.initializeApp(DB_CONFIG);\n    }\n    this.database = firebase.database().ref().child('cards');\n    this.updateCard = this.updateCard.bind(this); \n\n    this.state = {\n      cards: [],\n      currentCard: {}\n    }\n  }\n\n\n  componentWillMount(){\n    const currentCards = this.state.cards;\n    this.database.on('child_added', snap => {\n      currentCards.push({\n        id: snap.val().id,\n        eng: snap.val().eng,\n        han: snap.val().han,\n        rom: snap.val().rom,\n      })\n\n      this.setState({\n        cards: currentCards,\n        currentCard: this.getRandomCard(currentCards)\n      })\n    })\n  }\n\n  getRandomCard(currentCards){\n    var randomIndex = Math.floor(Math.random() * currentCards.length);\n    var card = currentCards[randomIndex];\n    if (card === this.state.currentCard){\n      this.getRandomCard(currentCards)\n    }\n    return(card);\n  }\n\n  updateCard(){\n    const currentCards = this.state.cards;\n    this.setState({\n      cards: currentCards,\n      currentCard: this.getRandomCard(currentCards)\n    })\n  }\n\n  render(){\n  return (\n    <div className=\"App\">\n      <div className=\"cardRow\">\n      <Card eng={this.state.currentCard.eng} \n            han={this.state.currentCard.han}\n            rom={this.state.currentCard.rom}\n            />\n      </div>\n      <div className=\"buttonRow\">\n        <DrawButton  drawCard={this.updateCard}/>\n      </div>\n    </div>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}